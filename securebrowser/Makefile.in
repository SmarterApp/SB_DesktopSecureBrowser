# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

DATE_STAMP=`date +"%Y-%m-%d"`
MSI=$(MOZ_APP_NAME)$(MOZ_APP_VERSION)-$(DATE_STAMP).msi

ifeq ($(TARGET_CPU),x86_64)
  CPU=64
else
  CPU=32
endif

include $(topsrcdir)/config/rules.mk

HOST_CPU = @host_cpu@

ifdef MAKENSISU

# For Windows build the uninstaller during the application build since the
# uninstaller is included with the application for mar file generation.
libs::
	$(MAKE) -C installer/windows uninstaller
ifdef MOZ_MAINTENANCE_SERVICE
	$(MAKE) -C installer/windows maintenanceservice_installer
endif
endif

ifdef MOZ_DEBUG
SB_DEBUG=debug-
endif

run:
ifeq ($(OS_ARCH),Linux)
	@cd $(DIST)/bin; ./$(MOZ_APP_NAME) $(url);
else 
ifeq ($(OS_ARCH),WINNT)
	@cd $(DIST)/bin; ./$(MOZ_APP_NAME) $(url);
else
	@cd $(DIST)/; ./$(MOZ_APP_NAME).app/Contents/MacOS/./$(MOZ_APP_NAME) $(url);
endif
endif

run-verbose:
ifeq ($(OS_ARCH),Linux)
	@export OPENKIOSK_JAVASCRIPT_DEBUGGING=1; cd $(DIST)/bin; ./$(MOZ_APP_NAME) $(url);
else 
ifeq ($(OS_ARCH),WINNT)
	@export OPENKIOSK_JAVASCRIPT_DEBUGGING=1; cd $(DIST)/bin; ./$(MOZ_APP_NAME) $(url);
else
	@export OPENKIOSK_JAVASCRIPT_DEBUGGING=1; cd $(DIST)/; ./$(MOZ_APP_NAME).app/Contents/MacOS/./$(MOZ_APP_NAME) $(url);
endif
endif

run-toolbar:
ifeq ($(OS_ARCH),Linux)
	@cd $(DIST)/bin; ./$(MOZ_APP_NAME) -options toolbar $(url);
endif
ifeq ($(OS_ARCH),WINNT)
	@cd $(DIST)/bin; ./$(MOZ_APP_NAME) -options toolbar $(url);
endif
ifeq ($(OS_ARCH),Darwin)
	@cd $(DIST)/; ./$(MOZ_APP_NAME).app/Contents/MacOS/./$(MOZ_APP_NAME) -options toolbar $(url);
endif

run-secure:
ifeq ($(OS_ARCH),Linux)
	@cd $(DIST)/bin; ./$(MOZ_APP_NAME) -options secure $(url);
endif
ifeq ($(OS_ARCH),WINNT)
	@cd $(DIST)/bin; ./$(MOZ_APP_NAME) -options secure $(url);
endif
ifeq ($(OS_ARCH),Darwin)
	@cd $(DIST)/; ./$(MOZ_APP_NAME).app/Contents/MacOS/./$(MOZ_APP_NAME) -options secure $(url);
endif

run-debug:
ifeq ($(OS_ARCH),Linux)
	@cd $(DIST)/bin; ./$(MOZ_APP_NAME) -options debug $(url);
endif
ifeq ($(OS_ARCH),WINNT)
	@cd $(DIST)/bin; ./$(MOZ_APP_NAME) -options debug $(url) -attach-console;
endif
ifeq ($(OS_ARCH),Darwin)
	@cd $(DIST)/; ./$(MOZ_APP_NAME).app/Contents/MacOS/./$(MOZ_APP_NAME) -options debug $(url);
endif

run-debugger:
ifeq ($(OS_ARCH),WINNT)
	(cd $(DIST)/bin; devenv -debugexe $(MOZ_APP_NAME).exe $(url));
endif

run-console:
ifeq ($(OS_ARCH),WINNT)
	(cd $(DIST)/bin; $(MOZ_APP_NAME).exe $(url) -attach-console);
endif


run-browser:
ifeq ($(OS_ARCH),Linux)
	@cd $(DIST)/bin; ./$(MOZ_APP_NAME) -P -chrome chrome://browser/content/ $(url);
else
ifeq ($(OS_ARCH),WINNT)
	@cd $(DIST)/bin; ./$(MOZ_APP_NAME) -chrome chrome://browser/content/ $(url);
else
	@cd $(DIST); ./$(MOZ_APP_NAME).app/Contents/MacOS/./$(MOZ_APP_NAME) -chrome chrome://browser/content/ $(url);
endif
endif

run-proxy:
ifeq ($(OS_ARCH),Linux)
	@cd $(DIST)/bin; ./$(MOZ_APP_NAME) -options proxy -P;
endif
ifeq ($(OS_ARCH),WINNT)
	@cd $(DIST)/bin; ./$(MOZ_APP_NAME) -options proxy;
else
	@cd $(DIST)/; ./$(MOZ_APP_NAME).app/Contents/MacOS/./$(MOZ_APP_NAME) -options proxy;
endif

run-cache:
ifeq ($(OS_ARCH),Linux)
	@cd $(DIST)/bin; ./$(MOZ_APP_NAME) -options cache -P;
endif
ifeq ($(OS_ARCH),WINNT)
	@cd $(DIST)/bin; ./$(MOZ_APP_NAME) -options cache;
else
	@cd $(DIST)/; ./$(MOZ_APP_NAME).app/Contents/MacOS/./$(MOZ_APP_NAME) -options cache;
endif
run-prefs:
ifeq ($(OS_ARCH),Linux)
	@cd $(DIST)/bin; ./$(MOZ_APP_NAME) -Preferences -P;
endif
ifeq ($(OS_ARCH),WINNT)
	@cd $(DIST)/bin; ./$(MOZ_APP_NAME) -Preferences;
else
	@cd $(DIST)/; ./$(MOZ_APP_NAME).app/Contents/MacOS/./$(MOZ_APP_NAME) -Preferences
endif

build-branding:
	@$(MAKE) -C branding/$(MOZ_APP_BASENAME);

distro: .distro .mar

.distro:
	rm -rf $(DIST)/*.dmg;
	$(MAKE) -C installer;
ifeq ($(OS_ARCH),Darwin)
	mv $(DIST)/$(MOZ_APP_NAME)-$(MOZ_APP_VERSION).en-US.mac.dmg $(DIST)/$(MOZ_APP_NAME)$(MOZ_APP_VERSION)-$(PROXY_DISTRO)$(DATE_STAMP).dmg
	rm -f ~/Desktop/$(MOZ_APP_NAME)*.dmg;
	cp $(DIST)/$(MOZ_APP_NAME)$(MOZ_APP_VERSION)-$(PROXY_DISTRO)$(DATE_STAMP).dmg ~/Desktop/
endif
ifeq ($(OS_ARCH),Linux)
	mv $(DIST)/$(MOZ_APP_NAME)-$(MOZ_APP_VERSION).en-US.linux-$(HOST_CPU).tar.bz2 $(DIST)/$(MOZ_APP_NAME)$(MOZ_APP_VERSION)-$(SB_DEBUG)$(PROXY_DISTRO)$(DATE_STAMP).tar.bz2
	rm -f ~/Desktop/$(MOZ_APP_NAME)*.tar.bz2
	cp $(DIST)/$(MOZ_APP_NAME)$(MOZ_APP_VERSION)-$(SB_DEBUG)$(PROXY_DISTRO)$(DATE_STAMP).tar.bz2 ~/Desktop/$(MOZ_APP_NAME)$(MOZ_APP_VERSION)-$(SB_DEBUG)$(PROXY_DISTRO)$(DATE_STAMP)-$(HOST_CPU).tar.bz2
endif

ifeq ($(OS_ARCH),WINNT)
msi: msi-us

msi-us:
	$(MAKE) -C installer;
	$(MAKE) mar;
	$(MAKE) -C installer/windows/msi msi-installer;
	cp $(DIST)/$(MSI) ~/Desktop;
endif

ifeq ($(OS_ARCH),Darwin)
dmg: distro
endif

ifeq ($(OS_ARCH),WINNT)
mar: mar-prep .mar

mar-prep:
	@echo Creating mar file ...;

.mar:
	$(MAKE) -C installer/windows/ installer;                                                                           \
	$(MAKE) -C ../tools/update-packaging;                                                                              \
	export TARGET_FOLDER=$(DIST)/update/securebrowser/$(MOZ_APP_NAME)/Win32/;                                          \
	mkdir -p $$TARGET_FOLDER/mar/;                                                                                     \
	export MAR_FILE=$(MOZ_APP_NAME)-$(MOZ_APP_VERSION).en-US.win32.complete.mar;                                       \
	export ZIP_FILE=$(MOZ_APP_NAME)-$(MOZ_APP_VERSION).en-US.win32.complete.update.zip;                                \
	rm -f $(DIST)/$$ZIP_FILE;                                                                                          \
	export BUILD_ID=$(shell awk '{print $$3}' $(DEPTH)/buildid.h);                                                     \
	export HASH=SHA1;                                                                                                  \
	export SHA_SUM_1=`openssl.exe sha1 $(DIST)/update/$$MAR_FILE | cut -f2 -d" "`;                                     \
	export FILE_SIZE=`ls -l $(DIST)/update/$$MAR_FILE | cut -f5 -d" "`;                                                \
	mv $(DIST)/update/$$MAR_FILE $$TARGET_FOLDER/mar/;                                                                 \
	sed -e's:__VERSION__:$(MOZ_APP_VERSION):g'  -e's:__BRANDING__:$(MOZ_APP_NAME):g' -e's:__BUILD_ID__:'$$BUILD_ID':g' -e's:__OS__:Win32:g' -e's:__MAR_FILE__:'$$MAR_FILE':g' -e's:__HASH__:'$$HASH':g' -e's:__SHASUM__:'$$SHA_SUM_1':g' -e's:__FILE_SIZE__:'$$FILE_SIZE':g' $(srcdir)/update/update.xml.in > $$TARGET_FOLDER/update.xml; \
	(cd $(DIST)/update/; zip -r ../$$ZIP_FILE *);
endif

ifeq ($(OS_ARCH),Linux)
mar: mar-prep .mar
mar-prep:
	@echo Creating mar file ...;                                                                                       \
	$(MAKE) -C installer;
.mar:
	$(MAKE) -C ../tools/update-packaging;                                                                              \
	export TARGET_FOLDER=$(DIST)/update/securebrowser/$(MOZ_APP_NAME)/Linux$(CPU)/;                                    \
	mkdir -p $$TARGET_FOLDER/mar/;                                                                                     \
	export MAR_FILE=$(MOZ_APP_NAME)-$(MOZ_APP_VERSION).en-US.linux-$(TARGET_CPU).complete.mar;                         \
	export ZIP_FILE=$(MOZ_APP_NAME)-$(MOZ_APP_VERSION).en-US.linux$(CPU).complete.update.zip;                          \
	rm -f $(DIST)/$$ZIP_FILE;                                                                                          \
	export BUILD_ID=$(shell awk '{print $$3}' $(DEPTH)/buildid.h);                                                     \
	export HASH=SHA512;                                                                                                \
	export SHA_SUM_512=`shasum -a 512 $(DIST)/update/$$MAR_FILE | cut -f1 -d" "`;                                      \
	export FILE_SIZE=`ls -l $(DIST)/update/$$MAR_FILE | cut -f5 -d" "`;                                                \
	mv $(DIST)/update/$$MAR_FILE $$TARGET_FOLDER/mar/;                                                                 \
	sed -e's:__VERSION__:$(MOZ_APP_VERSION):g' -e's:__BRANDING__:$(MOZ_APP_NAME):g' -e's:__BUILD_ID__:'$$BUILD_ID':g' -e's:__OS__:Linux'$(CPU)':g' -e's:__MAR_FILE__:'$$MAR_FILE':g' -e's:__HASH__:'$$HASH':g' -e's:__SHASUM__:'$$SHA_SUM_512':g' -e's:__FILE_SIZE__:'$$FILE_SIZE':g' $(srcdir)/update/update.xml.in > $$TARGET_FOLDER/update.xml; \
	(cd $(DIST)/update/; zip -r ../$$ZIP_FILE *);
endif

ifeq ($(OS_ARCH),Darwin)
mar: mar-prep .mar  
mar-prep:
	@echo Creating mar file ...;                                                           \
	$(MAKE) -C installer;                                                                                              
.mar: 
	$(MAKE) -C ../tools/update-packaging;                                                                                    
	@export MAR_FILE=$(MOZ_APP_NAME)-$(MOZ_APP_VERSION).en-US.mac.complete.mar;            \
	export TARGET_FOLDER=$(DIST)/update/securebrowser/$(MOZ_APP_NAME)/OSX/;                \
	export ZIP_FILE=$(MOZ_APP_NAME)-$(MOZ_APP_VERSION).en-US.mac.complete.update.zip;      \
	rm -f $(DIST)/$$ZIP_FILE;                                                              \
	export DIST_DIR=$(DIST);                                                               \
	export TOPSRCDIR=$(topsrcdir);                                                         \
	export OS=$(OS_ARCH);                                                                  \
	mkdir -p $$TARGET_FOLDER/mar/;                                                         \
	export BUILD_ID=$(shell awk '{print $$3}' $(DEPTH)/buildid.h);                         \
	export HASH=SHA512;                                                                    \
	export SHA_SUM_512=`shasum -a 512 $(DIST)/update/$$MAR_FILE | cut -f1 -d" "`;      \
	export FILE_SIZE=`ls -l $(DIST)/update/$$MAR_FILE | cut -f8 -d" "`;                    \
	mv $(DIST)/update/$$MAR_FILE $$TARGET_FOLDER/mar/;                                     \
	sed -e's:__VERSION__:$(MOZ_APP_VERSION):g' -e's:__BRANDING__:$(MOZ_APP_NAME):g' -e's:__BUILD_ID__:'$$BUILD_ID':g' -e's:__OS__:OSX:g' -e's:__MAR_FILE__:'$$MAR_FILE':g' -e's:__HASH__:'$$HASH':g' -e's:__SHASUM__:'$$SHA_SUM_512':g' -e's:__FILE_SIZE__:'$$FILE_SIZE':g' $(srcdir)/update/update.xml.in > $$TARGET_FOLDER/update.xml; \
	(cd $(DIST)/update/; zip -r ../$$ZIP_FILE *)
endif

buildID:
	echo $(shell awk '{print $$3}' $(DEPTH)/buildid.h);

version:
	@echo $(MOZ_APP_VERSION); 

displayname:
	@echo $(MOZ_APP_DISPLAYNAME); 

host_cpu:
	@echo host_cpu: $(HOST_CPU)

help:
	grep ^.*:$$  $(srcdir)/Makefile.in | sort -u;

url:
	@echo $(url);

